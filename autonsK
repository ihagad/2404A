#include "main.h"


/////
// For instalattion, upgrading, documentations and tutorials, check out website!
// https://ez-robotics.github.io/EZ-Template/
/////


const int DRIVE_SPEED = 110; // This is 110/127 (around 87% of max speed).  We don't suggest making this 127.
                             // If this is 127 and the robot tries to heading correct, it's only correcting by
                             // making one side slower.  When this is 87%, it's correcting by making one side
                             // faster and one side slower, giving better heading correction.
const int TURN_SPEED  = 90;
const int SWING_SPEED = 90;


  //pros::Motor intake (4, true);
  pros::Motor intake (13, true);
  pros::Motor shooting (11, true);
  pros::ADIDigitalIn limit (20);
  pros::Controller controller (CONTROLLER_MASTER);
  pros::ADIDigitalOut pistonR ('C');
  pros::ADIDigitalOut pistonL ('B');
  pros::ADIDigitalOut elevation ('A');
  pros::ADIDigitalOut blocker ('D');

///
// Constants
///

// It's best practice to tune constants when the robot is empty and with heavier game objects, or with lifts up vs down.
// If the objects are light or the cog doesn't change much, then there isn't a concern here.

void default_constants() {
  chassis.set_slew_min_power(80, 80);
  chassis.set_slew_distance(7, 7);
  chassis.set_pid_constants(&chassis.headingPID, 11, 0, 20, 0);
  chassis.set_pid_constants(&chassis.forward_drivePID, 0.45, 0, 5, 0);
  chassis.set_pid_constants(&chassis.backward_drivePID, 0.45, 0, 5, 0);
  chassis.set_pid_constants(&chassis.turnPID, 5, 0.003, 35, 15);
  chassis.set_pid_constants(&chassis.swingPID, 7, 0, 45, 0);

  // chassis.set_pid_constants(&chassis.forward_drivePID, 0.75, 0.0, 1, 10);
  // chassis.set_pid_constants(&chassis.backward_drivePID, 0.75, 0.0, 1, 10);
  // chassis.set_pid_constants(&chassis.turnPID, 2.9, 0.5, 2, 10);
  // chassis.set_pid_constants(&chassis.swingPID, 1.75, 0, 1, 10);
}

void one_mogo_constants() {
  chassis.set_slew_min_power(80, 80);
  chassis.set_slew_distance(7, 7);
  chassis.set_pid_constants(&chassis.headingPID, 11, 0, 20, 0);
  chassis.set_pid_constants(&chassis.forward_drivePID, 0.45, 0, 5, 0);
  chassis.set_pid_constants(&chassis.backward_drivePID, 0.45, 0, 5, 0);
  chassis.set_pid_constants(&chassis.turnPID, 5, 0.003, 35, 15);
  chassis.set_pid_constants(&chassis.swingPID, 7, 0, 45, 0);
}

void two_mogo_constants() {
  chassis.set_slew_min_power(80, 80);
  chassis.set_slew_distance(7, 7);
  chassis.set_pid_constants(&chassis.headingPID, 11, 0, 20, 0);
  chassis.set_pid_constants(&chassis.forward_drivePID, 0.45, 0, 5, 0);
  chassis.set_pid_constants(&chassis.backward_drivePID, 0.45, 0, 5, 0);
  chassis.set_pid_constants(&chassis.turnPID, 5, 0.003, 35, 15);
  chassis.set_pid_constants(&chassis.swingPID, 7, 0, 45, 0);
}

void exit_condition_defaults() {
  chassis.set_exit_condition(chassis.turn_exit, 100, 3, 500, 7, 500, 500);
  chassis.set_exit_condition(chassis.swing_exit, 100, 3, 500, 7, 500, 500);
  chassis.set_exit_condition(chassis.drive_exit, 80, 50, 300, 150, 500, 500);
}

void modified_exit_condition() {
  chassis.set_exit_condition(chassis.turn_exit, 100, 3, 500, 7, 500, 500);
  chassis.set_exit_condition(chassis.swing_exit, 100, 3, 500, 7, 500, 500);
  chassis.set_exit_condition(chassis.drive_exit, 80, 50, 300, 150, 500, 500);
}


void singleMotorTest(){
  
  //forward
  chassis.set_drive_pid(24, DRIVE_SPEED, true);
  chassis.wait_drive();

  //backward
  chassis.set_drive_pid(-24, TURN_SPEED, true);
  chassis.wait_drive();

  //right
  chassis.set_turn_pid(90, TURN_SPEED);
  chassis.wait_drive();

  //left
  chassis.set_turn_pid(-90, TURN_SPEED);
  chassis.wait_drive();

  //intake
  intake.move_velocity(600);
  pros::delay(8000);
  intake.move_velocity(0);
  pros::delay(8000);

  //outake
  intake.move_velocity(-600);
  pros::delay(8000);
  intake.move_velocity(0);
  pros::delay(8000);

  //shooting
  shooting.move_velocity(-600);
  pros::delay(8000);
  shooting.move_velocity(0);
}

void trial(){
  // chassis.set_turn_pid(-30, TURN_SPEED);
  // chassis.wait_drive();
  chassis.set_drive_pid(100, DRIVE_SPEED, true);
  chassis.wait_drive();
}

void defense1(){
  // //put in preload
  chassis.set_turn_pid(-30, TURN_SPEED);
  chassis.wait_drive();
  chassis.set_drive_pid(-95, DRIVE_SPEED, true);
  chassis.wait_drive();
  chassis.set_turn_pid(0, TURN_SPEED);
  chassis.wait_drive();
  chassis.set_drive_pid(37, DRIVE_SPEED, true);
  chassis.wait_drive();
  //take out corner triball
  chassis.set_turn_pid(-45, TURN_SPEED);
  chassis.wait_drive();
  pistonR.set_value(true);
  chassis.wait_drive();
  chassis.set_drive_pid(40, DRIVE_SPEED, true);
  chassis.wait_drive();
  chassis.set_turn_pid(-90, TURN_SPEED);
  chassis.wait_drive();
  pistonR.set_value(false);
  chassis.set_drive_pid(110, DRIVE_SPEED, true);
  chassis.wait_drive();
  // pistonR.set_value(false);
  // chassis.wait_drive();
  // chassis.set_turn_pid(290, TURN_SPEED);
  // chassis.wait_drive();
  // pistonL.set_value(true);
  // chassis.set_drive_pid(113, DRIVE_SPEED, false);
  // chassis.wait_drive();
}

void defense2(){
  chassis.set_drive_pid(-150, DRIVE_SPEED, true);
}

void offence1(){
  chassis.set_turn_pid(30, TURN_SPEED);
  chassis.wait_drive();
  chassis.set_drive_pid(-120, DRIVE_SPEED, true);
  chassis.wait_drive();
  chassis.set_turn_pid(32, TURN_SPEED);
  chassis.wait_drive();
  chassis.set_drive_pid(50, DRIVE_SPEED, true);
  chassis.wait_drive();

  chassis.set_drive_pid(-60, DRIVE_SPEED, true);
  chassis.wait_drive();
}

void skills(){
  chassis.set_turn_pid(-30, TURN_SPEED);
  chassis.wait_drive();
  chassis.set_drive_pid(-105, DRIVE_SPEED+17, true);
  chassis.wait_drive();
  chassis.set_drive_pid(50, DRIVE_SPEED+10, true);
  chassis.wait_drive();
  chassis.set_turn_pid(95, TURN_SPEED);
  chassis.wait_drive();
  chassis.set_drive_pid(20, DRIVE_SPEED+10, true);
  pros::delay(500);
  //change 
  shooting.move(-100);
  pros::delay(300);
  shooting.move(0);

  chassis.set_turn_pid(135, TURN_SPEED);
  chassis.wait_drive();
  chassis.set_drive_pid(55, DRIVE_SPEED, true);
  chassis.wait_drive();

  chassis.set_turn_pid(90, TURN_SPEED);
  chassis.wait_drive();
  chassis.set_drive_pid(260, DRIVE_SPEED, true);
  chassis.wait_drive();

  chassis.set_turn_pid(45, TURN_SPEED);
  chassis.wait_drive();
  // pistonR.set_value(true);
  // pistonL.set_value(true);
  chassis.set_drive_pid(-100, DRIVE_SPEED, false);
  chassis.set_turn_pid(0, TURN_SPEED-50);
//   chassis.wait_drive();
//   chassis.set_turn_pid(47, TURN_SPEED);
//   chassis.wait_drive();
//   chassis.set_drive_pid(-85, DRIVE_SPEED, true);
//   chassis.wait_drive();
//   chassis.set_drive_pid(50, DRIVE_SPEED, true);
//   chassis.wait_drive();
//   pistonR.set_value(false);
//   // chassis.set_drive_pid(90, DRIVE_SPEED, true);
//   // chassis.wait_drive();



//   chassis.set_turn_pid(-40, TURN_SPEED);
//   chassis.wait_drive();
//   // // piston1.set_value(true);
//   // piston2.set_value(true);
//   // chassis.set_turn_pid()
//   // chassis.wait_turn();
//   // chassis.set_drive_pid();
//   // chassis.wait_drive();
//   pistonR.set_value(true);
//   pistonL.set_value(true);
//   chassis.set_drive_pid(-190, DRIVE_SPEED, true);
//   chassis.wait_drive();             
//   chassis.set_turn_pid(17, TURN_SPEED);
//   chassis.wait_drive(); 
//   chassis.set_drive_pid(-120, DRIVE_SPEED, true);
//   chassis.wait_drive();

//   chassis.set_turn_pid(150, TURN_SPEED);
//   chassis.wait_drive();
//   chassis.set_drive_pid(-110, DRIVE_SPEED, true);
//   chassis.wait_drive();
//   pistonR.set_value(false);
//   pistonL.set_value(false);
//   chassis.wait_drive();
  
//   chassis.set_turn_pid(90, TURN_SPEED);
//   chassis.wait_drive();
//   chassis.set_drive_pid(70, DRIVE_SPEED, false);
//   chassis.wait_drive();
//   chassis.set_turn_pid(110, TURN_SPEED);
//   chassis.wait_drive();
//   pistonR.set_value(true);
//   pistonL.set_value(true);
//   chassis.wait_drive();
//   chassis.set_drive_pid(-100, DRIVE_SPEED+17, true);
//   chassis.wait_drive();
//   chassis.set_drive_pid(70, DRIVE_SPEED, true);
//   chassis.wait_drive();
//   chassis.set_drive_pid(-100, DRIVE_SPEED, true);
//   chassis.wait_drive();
//   // chassis.set_drive_pid(-110, DRIVE_SPEED, true);
//   // chassis.wait_drive();
//   // piston2.set_value(false);
//   // chassis.set_turn_pid(45, TURN_SPEED);
//   // chassis.wait_drive();
//   // chassis.set_drive_pid(-170, DRIVE_SPEED+17, true);
//   // chassis.wait_drive();
//   // piston2.set_value(true);
//   // piston1.set_value(false);
//   // chassis.set_drive_pid(-30, TURN_SPEED-10, false);
//   // chassis.set_turn_pid(120, TURN_SPEED);
//   // chassis.wait_drive();
//   // chassis.set_drive_pid(-50, DRIVE_SPEED, true);
//   // chassis.wait_drive();
//   // chassis.set_turn_pid(200, TURN_SPEED);
//   // chassis.wait_drive();
//   // chassis.set_drive_pid(-50, DRIVE_SPEED+17, true);
//   // chassis.wait_drive();
// }

// void defense3(){
//   chassis.set_drive_pid(-104, DRIVE_SPEED + 10, true);
//   chassis.wait_drive();
//   chassis.set_drive_pid(35, DRIVE_SPEED, true);
//   chassis.wait_drive();
//   chassis.set_turn_pid(83, TURN_SPEED);
//   chassis.wait_drive();
//   chassis.set_drive_pid(107, DRIVE_SPEED, true);
//   intake.move_velocity(-100);
//   pros::delay(1600);
//   intake.move_velocity(0);
//   chassis.set_turn_pid(-135, TURN_SPEED);
//   chassis.wait_drive();
//   chassis.set_drive_pid(77.5, DRIVE_SPEED, true);
//   chassis.wait_drive();
//   // chassis.set_turn_pid(-232,TURN_SPEED);
//   // chassis.wait_drive();
//   // chassis.set_drive_pid(70, DRIVE_SPEED, true);
//   // chassis.wait_drive();
//   intake.move(100);
//   pros::delay(1600);
//   intake.move(0);
//   //chassis.set_drive_pid(-, DRIVE_SPEED, true);
//   chassis.wait_drive();

}

// void sixBallElevation(){
//   //pick elevation triball and go back to pvc pipe
//   intake.move(127);
//   chassis.set_drive_pid(10, DRIVE_SPEED, true);
//   chassis.wait_drive();
//   chassis.set_drive_pid(-10, DRIVE_SPEED, true);
//   chassis.wait_drive();
//   //turn around to get triball out of match load corner
//   chassis.set_turn_pid();
//   chassis.wait_drive();
//   chassis.set_drive_pid();
//   chasss.wait_drive();
//   pistonR.set_value();

// }
